源码：
    可以查看mybatis的3.4.6的目录结构
        org.apache.ibatis
            annotations
                包含所有Mapper接口的注解
                例如常用的@Param，@Update，@Select，@Delete等
            binding
                生产Mapper接口的动态代理并进行管理
            builder
                包含Configuration对象所有构建器，主要包括xml，注解2种配置方式解析
                BaseBuilder构建器基类
                XMLConfigBuilder 解析Configuration.xml配置文件
                XMLMapperBuilder  解析Mapper.xml配置文件
                XMLStatementBuilder 解析select\update\delete标签
                MapperAnnotationBuilder 注解Mapper解析
            cache
                缓存功能实现，包含各种缓存装饰器
                TransactionCache 二级缓存功能实现
            cursor
                实现游标的方式查询数据，游标非常适合处理百万级别的数据查询，通常情况下不适合一次性加载到内存中
                这种方式类似使用SAX解析XML
            datasource
                数据源，包括JNDI数据源，连接池功能
            executor
                包含SQL语句执行器，核心功能包
                功能包括：
                    主键生成功能
                    执行参数解析功能
                    执行结果解析功能
                    SQL执行器
                    缓存执行器
                ErrorContext 错误上下文对象，跟踪所有执行流程
            exceptions
                框架异常，常见异常：TooManyResultsException
            io
                资源文件读取
            jdbc
                JDBC一些操作
                SQLRunner SQL执行
                ScriptRunner脚本执行，可以执行建库语句，在执行测试用例的时候用的非常多
            lang
                这个包只有两个注解
                @UsesJava7 @UsesJava8  标识哪些可以使用JDK1.7API，哪些可以使用JDK1.8API
            logging
                日志功能，实现多种日志框架的对接
                org.apache.ibatis.logging.jdbc 代理了所有JDBC功能操作，实现了在debug模式下能够打印SQL
            mapping
                配置文件与实体对象的映射功能，Mapper映射，参数映射，结果映射等。
            parsing
                解析工具包
                GenericTokenParser：解析#{}，${}这种占位符
                XPathParser：XPath方式解析XML
                PropertyParser:properties解析器
                org.apache.ibatis.plugin
            plugin
                拦截功能实现，使用代理模式实现拦截
            reflection
                反射器功能，这个包下实现元数据编程
                通过java对象转换成元数据对象MetaObject，然后就可以对元数据对象进行赋值操作，数据库查询结果到Java对象映射
                就是通过元数据实现
            scripting
                动态SQL语言实现，配置文件中<if>,<where>,<set>,<foreach>功能就是在这个包实现，借助OGNL表达式，可以扩展自己的语言实现的功能
            session
                主要实现SqlSession功能，非常核心包
                官方注释：
                    SqlSession包含了Mybatis工作的所有的java接口，通过这些接口你可以执行SQL命令，获取Mapper，管理事务
            transaction
                事务功能实现，包装了数据库连接，处理数据库连接生命周期：
                    连接创建，预编译，提交/回滚 关闭
            type
                类型处理器，包括所有数据库类型对应Java类型的处理器，如果要实现自己类型处理器就需要实现包下的基础接口


    谈谈设计模式的几个原则
         单一职责原则：
            一个类或者一个接口只负责唯一项职责，尽量设计出功能单一的接口；

            降低代码复杂性，增强可读性，增加系统可扩展性。

         依赖倒转原则：
            高层模块不应该依赖低层模块具体实现，解耦高层与低层。既面向接口编程，当实现发生变化时，只需提供新的实现类，不需要修改高层模块代码;



         开放-封闭原则（非常重要）：
            程序对外扩展开放，对修改关闭；换句话说，当需求发生变化时，我们可以通过添加新模块 来满足新需求，而不是通过修改原来的实现代码来满足新需求；
    日志模块源码分析（org.apache.ibatis.logging）
        MyBatis没有提供日志的实现类，需要接入第三方的日志组件，但第三方日志组件都有各自的Log级别，且各不相同，
        二MyBatis统一提供了trace、debug、warn、error四个级别；
            通过mybatis的Log接口 + 各种第三方日志的适配对象 来 适配 所有的第三方日志组件
        自动扫描日志实现，并且第三方日志插件加载优先级如下：slf4J → commonsLoging → Log4J2 → Log4J → JdkLog;
            LogFactory用来处理加载优先级
        日志的使用要优雅的嵌入到主体功能中(代理模式使用)；
    数据源模块源码分析
        常见的数据源组件都实现了javax.sql.DataSource接口
        MyBatis不但要能集成第三方的数据源组件，自身也提供了数据源的实现；
        一般情况下，数据源的初始化过程参数较多，比较复杂；


        UnpooledDataSourceFactory
            UnpooledDataSource
                private static Map<String, Driver> registeredDrivers = new ConcurrentHashMap<String, Driver>();  将要注册的驱动放在这里
        PooledDataSourceFactory
            PooledDataSource
                private final PoolState state = new PoolState(this);

                protected int poolTimeToWait = 20000;
                获取连接
                    popConnection方法源码说明
                        保证线程安全，在获取连接时，使用同步机制（synchronized）,同步的资源是state
                        首先判断空闲连接列表中（state.idleConnections）是否有可用的连接，如果有，直接取空闲列表中的第一个
                        如果没有，
                            先判断当前活跃的连接数量（state.activeConnections）是否大于连接池最大的活跃数量，如果没有，创建一个新连接
                            如果已经大于，开始去判断是否有超时连接，去判断活跃的列表中的第一个（最先使用的连接），判断已经使用的时间是否达到超时
                            如果已经超时，从这个列表（state.activeConnections）中移除这个超时连接，同时判断这个连接是否是自动提交事务的，
                                如果不是自动提交事务，将这个连接当前操纵的数据进行回滚
                                接下来，在这个超时连接的基础上，重新构造一个连接，同时将这个连接的相关信息进行初始化

                                让超时的老连接失效（oldestActiveConnection.invalidate();）
                            如果没有超时的连接
                                必须阻塞等待
                                就将这个等待数量+1; state.hadToWaitCount++;
                                等待一个时间
                                    state.wait(poolTimeToWait);  //等待这么长时间
                归还连接
                    pushConnection方法源码说明
                        同步代码块（state）
                        从当前活跃列表（state.activeConnections）中移除这个连接
                        判断连接是否有效，如果有效
                            首先判断空闲列表（state.idleConnections）是否小于最大空闲值，如果小于，
                                对这个连接进行回收，对这个连接做一系列处理，
                                再基于这个连接构建一个新的连接，丢入这个state.idleConnections中
                                并且，通知所有等待的对象（state.notifyAll();），有新连接可以使用


                            如果大于，将这个连接真实关闭

                        如果无效，直接 state.badConnectionCount++;

            PooledConnection 代理连接
        JndiDataSourceFactory
    缓存模块源码分析
        Mybatis缓存的实现是基于Map的，从缓存里面读写数据是缓存模块的核心基础功能；
        除核心功能之外，有很多额外的附加功能，如：防止缓存击穿，添加缓存清空策略（fifo、lru）、序列化功 能、日志能力、定时清空能力等；
        附加功能可以以任意的组合附加到核心基础功能之上；

        Cache 接口
        PerpetualCache implements Cache
            private Map<Object, Object> cache = new HashMap<Object, Object>();
        BlockingCache implements Cache
    反射模块源码分析
        反射核心类
            MetaObject：封装了对象元信息，包装了mybatis中五个核心的反射类。也是提供给外部使用的反射工具类， 可以利用它可以读取或者修改对象的属性信息；
            ObjectFactory：MyBatis每次创建结果对象的新实例时，它都会使用对象工厂（ObjectFactory）去构建POJO；
            ReflectorFactory：创建Reflector的工厂类，Reflector是mybatis反射模块的基础，每个Reflector对象都对应 一个类，在其中缓存了
                反射操作所需要的类元信息；
            ObjectWrapper：对对象的包装，抽象了对象的属性信息，他定义了一系列查询对象属性信息的方法，以及更 新属性的方法；
            ObjectWrapperFactory： ObjectWrapper 的工程类，用于创建ObjectWrapper ；
    binding模块源码分析
        为什么使用mapper接口就能操作数据库？？？？？？？
            配置文件解读+动态代理的增强

            MapperRegistry ： mapper接口和对应的代理对象工厂的注册中心；
            MapperProxyFactory：用于生成mapper接口动态代理的实例对象；
            MapperProxy：实现了InvocationHandler接口，它是增强mapper接口的实现；
            MapperMethod：封装了Mapper接口中对应方法的信息，以及对应的sql语句的信息；它是mapper接口与映射配置文件中sql语句的桥梁；

            DefaultSqlSession
                getMapper(Class<T> type);》》》》》》
                     return configuration.<T>getMapper(type, this);

            Configuration
                onfiguration.<T>getMapper(type, this);》》》》》
                    //从mapperRegistry中获取代理类
                    return mapperRegistry.getMapper(type, sqlSession);

    mybatis核心流程
        初始化阶段
            读取XML配置文件和注解中的配置信息，创建配置对象，并完成对各个模块的初始化的工作
            mybatis的核心配置文件：
                mybatis-config.xml
        代理阶段
            封装iBatis的编程模型，使用Mapper接口开发的初始化工作
        数据读写阶段
            通过SqlSession完成SQL的解析，参数的映射，SQL的执行，结果的解析过程。

    mybatis的初始化
        mybatis.config.xml     XMLConfigBuilder

        Mybatis映射器
        *mapper.java  *mapper.xml   ---->>>>> XMLMapperBuilder   XMLStatementBuilder

        Configuration

        映射器的关键类
            Configuration ：
                Mybatis启动初始化的核心就是将所有xml配置文件信息加载到Configuration对象
                中， Configuration是单例的，生命周期是应用级的；
            MapperRegistry：
                mapper接口动态代理工厂类的注册中心。在MyBatis中，通过mapperProxy实现
                InvocationHandler接口，MapperProxyFactory用于生成动态代理的实例对象；
            ResultMap：
                用于解析mapper.xml文件中的resultMap节点，使用ResultMapping来封装id，result等
                子元素；
            MappedStatement：
                用于存储mapper.xml文件中的select、insert、update和delete节点，同时还包
            含了这些节点的很多重要属性；
            SqlSource：
                mapper.xml文件中的sql语句会被解析成SqlSource对象，经过解析SqlSource包含的语
                句最终仅仅包含？占位符，可以直接提交给数据库执行；

        SqlSession是MyBaits对外提供的最关键的核心接口，通过它可以执行数据库读写命令、获取映射器、管 理事务等；

    Executor组件分析

        二级缓存使用
            CachingExecutor
                query(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)》》》
                    //去获取二级缓存
                    Cache cache = ms.getCache();
                    if (cache != null) {   //如果二级缓存不为空
                      flushCacheIfRequired(ms);
                      if (ms.isUseCache() && resultHandler == null) {
                        ensureNoOutParams(ms, boundSql);
                        @SuppressWarnings("unchecked")
                        List<E> list = (List<E>) tcm.getObject(cache, key);
                        if (list == null) {
                          //二级缓存为空，才会调用BaseExecutor.query  下面的方法
                          list = delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
                          tcm.putObject(cache, key, list); // issue #578 and #116
                        }
                        return list;
                      }
                    }
                    return delegate.<E> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);
        BaseExecutor实现Executor接口，使用模板方法设计模式
            query(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)》》》》
                ErrorContext.instance().resource(ms.getResource()).activity("executing a query").object(ms.getId());
                if (closed) {  //检查当前executor是否关闭
                  throw new ExecutorException("Executor was closed.");
                }
                if (queryStack == 0 && ms.isFlushCacheRequired()) { //非嵌套查询，并且flushCache配置为true，则需要清空一级缓存
                  clearLocalCache();
                }
                List<E> list;
                try {
                  queryStack++; //嵌套查询层次+1
                  list = resultHandler == null ? (List<E>) localCache.getObject(key) : null; //从已有缓存中查询
                  if (list != null) {
                    //针对调用存储过程的结果处理
                    handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);
                  } else {
                    //缓存未命中，从数据库加载数据（真实交互数据库的方法）
                    list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);
                  }
                } finally {
                  queryStack--;
                }
                if (queryStack == 0) {
                  for (DeferredLoad deferredLoad : deferredLoads) {
                    deferredLoad.load();
                  }
                  // issue #601
                  deferredLoads.clear();
                  //如果当前SQL的一级缓存配置为STATEMENT，查询完即清空一级缓存
                  if (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) {
                    // issue #482
                    clearLocalCache();
                  }
                }
                return list;
            queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql); 》》》》》》》》

                List<E> list;
                localCache.putObject(key, EXECUTION_PLACEHOLDER); //从缓存中添加占位符
                try {
                  //调用抽象方法doQuery,方法查询数据库并返回结果，可选的实现包括，simple，reuse，batch
                  //此处使用的就是模板方法的设计模式
                  list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);
                } finally {
                  localCache.removeObject(key); //从缓存中删除占位符
                }
                localCache.putObject(key, list); //将真正的结果对象添加到一级缓存
                if (ms.getStatementType() == StatementType.CALLABLE) { //如果是调用存储过程
                  localOutputParameterCache.putObject(key, parameter); //缓存输出类型结果参数
                }
                return list;
            doQuery的SimpleExecutor的实现》》》》》》》
                Statement stmt = null;
                try {
                  Configuration configuration = ms.getConfiguration();
                  //创建StatementHandler对象
                  StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);
                  //创建Statement对象 方法下面进行说明
                  stmt = prepareStatement(handler, ms.getStatementLog());
                  return handler.<E>query(stmt, resultHandler);
                } finally {
                  closeStatement(stmt);
                }
            prepareStatement(handler, ms.getStatementLog());  》》》》
                Statement stmt;
                //获取Connection对象的动态代理，增加日志能力
                Connection connection = getConnection(statementLog);
                //通过不同的StatementHandler，利用connection创建 Statement
                stmt = handler.prepare(connection, transaction.getTimeout());
                //处理占位符
                handler.parameterize(stmt);
                return stmt;
            handler.prepare(connection, transaction.getTimeout());》》》》
                ErrorContext.instance().sql(boundSql.getSql());
                Statement statement = null;
                try {
                  statement = instantiateStatement(connection); //模板设计模式
                  setStatementTimeout(statement, transactionTimeout);
                  setFetchSize(statement);
                  return statement;
                } catch (SQLException e) {
                  closeStatement(statement);
                  throw e;
                } catch (Exception e) {
                  closeStatement(statement);
                  throw new ExecutorException("Error preparing statement.  Cause: " + e, e);
                }
        Executor三个重要小弟
            通过对SimpleExecutor doQuery()方法的解读发现，Executor是个指挥官，它在调度三个小弟工作：
                StatementHandler：它的作用是使用数据库的Statement或PrepareStatement执行操作，启承上启下作用；
                ParameterHandler：对预编译的SQL语句进行参数设置，SQL语句中的的占位符“？”都对应BoundSql.parameterMappings
                    集合中的一个元素，在该对象中记录了对应的参数名称以及该参数的相关属性
                ResultSetHandler：对数据库返回的结果集（ResultSet）进行封装，返回用户指定的实体类型；
        StatementHandler
             StatementHandler完成Mybatis最核心的工作，也是Executor实现的基础；功能包括：创建statement对象，
                为sql语句绑定参数，执行增删改查等SQL语句、将结果映射集进行转化；
             BaseStatementHandler：所有子类的抽象 父类，定义了初始化statement的操作顺序， 由子类实现具体的实例化不同的statement （模板模式）；
             RoutingStatementHandler：Excutor组件 真正实例化的子类，使用静态代理模式， 根据上下文决定创建哪个具体实体类；
             SimpleStatmentHandler ：使用statement 对象访问数据库，无须参数化；
             PreparedStatmentHandler ：使用预编译 PrepareStatement对象访问数据库；
             CallableStatmentHandler ：调用存储过程；

    源码解析

        正常写，创建SqlSessionFactory的写法：
            InputStream resourceAsStream = Resources.getResourceAsStream("mybatis-config.xml");
            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(resourceAsStream);
            整个流程分析》》》》》》》》》》》》》》》》》》》》》
                build方法实现：
                    XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);
                    return build(parser.parse()); //核心  parser.parse()

                    XMLConfigBuilder
                        parse()
                            parseConfiguration(parser.evalNode("/configuration"));   //解析
                                propertiesElement(root.evalNode("properties"));
                                Properties settings = settingsAsProperties(root.evalNode("settings"));
                                loadCustomVfs(settings);
                                typeAliasesElement(root.evalNode("typeAliases"));
                                pluginElement(root.evalNode("plugins"));
                                objectFactoryElement(root.evalNode("objectFactory"));
                                objectWrapperFactoryElement(root.evalNode("objectWrapperFactory"));
                                reflectorFactoryElement(root.evalNode("reflectorFactory"));
                                settingsElement(settings);
                                // read it after objectFactory and objectWrapperFactory issue #631
                                environmentsElement(root.evalNode("environments"));
                                databaseIdProviderElement(root.evalNode("databaseIdProvider"));
                                typeHandlerElement(root.evalNode("typeHandlers"));
                                mapperElement(root.evalNode("mappers"));   //解析mapper
                                /*
                                    核心其实就是使用XMLMapperBuilder去解析
                                     mapperParser.parse();
                                */

            某些重要子流程分析》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》
                XMLMapperBuilder
                    parse()
                        //判断是否已经加载该配置文件
                        if (!configuration.isResourceLoaded(resource)) {
                             configurationElement(parser.evalNode("/mapper"));  //处理mapper节点（核心）见下
                             configuration.addLoadedResource(resource);  //将mapper文件添加到configuration.loadedResources中
                             bindMapperForNamespace(); //注册mapper接口
                        }

                        parsePendingResultMaps(); // 处理解析失败的ResultMap节点
                        parsePendingCacheRefs();  // 处理解析失败的CacheRef节点
                        parsePendingStatements(); // 处理解析失败的SQL语句节点


                    configurationElement(parser.evalNode("/mapper")); 流程分析》》》》》》》》》》》》
                        //获取mapper节点中的namespace属性
                        String namespace = context.getStringAttribute("namespace");
                        if (namespace == null || namespace.equals("")) {
                             throw new BuilderException("Mapper's namespace cannot be empty");
                        }
                        //设置builderAssistant的namespace属性
                        builderAssistant.setCurrentNamespace(namespace);
                        //解析cache-ref节点
                        cacheRefElement(context.evalNode("cache-ref"));
                        //解析cache节点（重点分析）
                        cacheElement(context.evalNode("cache"));
                        //解析parameterMap节点(已废弃)
                        parameterMapElement(context.evalNodes("/mapper/parameterMap"));
                        //解析resultMap节点（基于数据结果去理解），解析cache节点，重点分析
                        resultMapElements(context.evalNodes("/mapper/resultMap"));
                        //解析SQL节点
                        sqlElement(context.evalNodes("/mapper/sql"));
                        //解析select，insert，update，delete节点，重点分析
                        buildStatementFromContext(context.evalNodes("select|insert|update|delete"));

                    cacheElement(context.evalNode("cache")); 流程分析》》》》》》》》》》》》》》》
                           //获取cache节点的type属性，默认为PERPETUAL
                          String type = context.getStringAttribute("type", "PERPETUAL");
                           //找到type对应的cache接口的实现
                          Class<? extends Cache> typeClass = typeAliasRegistry.resolveAlias(type);
                          //读取eviction属性，即缓存的淘汰策略，默认LRU
                          String eviction = context.getStringAttribute("eviction", "LRU");
                          //根据eviction属性，找到装饰器
                          Class<? extends Cache> evictionClass = typeAliasRegistry.resolveAlias(eviction);
                          //读取flushInterval属性，即缓存的刷新周期
                          Long flushInterval = context.getLongAttribute("flushInterval");
                          //读取size属性，即缓存的容量大小
                          Integer size = context.getIntAttribute("size");
                          //读取readOnly属性，判断是否只读
                          boolean readWrite = !context.getBooleanAttribute("readOnly", false);
                          //读取blocking属性，即缓存是否阻塞
                          boolean blocking = context.getBooleanAttribute("blocking", false);
                          Properties props = context.getChildrenAsProperties();
                          //通过builderAssistant创建缓存对象，并添加至configuration
                          builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);
                    builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props); 流程》》》》
                        //经典的建造者模式，创建一个cache对象
                        Cache cache = new CacheBuilder(currentNamespace)
                            .implementation(valueOrDefault(typeClass, PerpetualCache.class))
                            .addDecorator(valueOrDefault(evictionClass, LruCache.class))
                            .clearInterval(flushInterval)
                            .size(size)
                            .readWrite(readWrite)
                            .blocking(blocking)
                            .properties(props)
                            .build();
                        //将缓存添加至configuration，注意二级缓存以命名空间为单位进行划分
                        configuration.addCache(cache);
                        currentCache = cache;
                        return cache;
                    resultMapElements(context.evalNodes("/mapper/resultMap")); 流程》》》》》
                        resultMapElement(resultMapNode);

                        对应的数据结构：ResultMapping
                    buildStatementFromContext(context.evalNodes("select|insert|update|delete")); 流程》》》》
                        if (configuration.getDatabaseId() != null) {
                          buildStatementFromContext(list, configuration.getDatabaseId());
                        }
                        buildStatementFromContext(list, null);
                    buildStatementFromContext(list, null); 流程》》》》
                       statementParser.parseStatementNode();
                XMLStatementBuilder
                    parseStatementNode（）》》》》》流程




                    对应数据结构：MappedStatement
