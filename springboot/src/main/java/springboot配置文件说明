两种配置文件：
application.properties
application.yml


springboot如何单元测试？？？？


事务
    通过@Transactional注解
    见UserServiceImpl类
全局异常处理
    见util中的GlobalExceptionHandler
访问静态资源
    放在resources目录下面
    /static
    /public
jsp使用
    不建议使用
    依赖web容器
    前后端分离 完全分离
    注意：
        必须建立跟java,resources同级的目录webapp,在webapp下面建立文件夹，建立在WEB-INF/jsp文件夹或者将JSP文件放在webapp文件夹下面的jsp文件夹下，指定后即可能访问
        如果想访问，在当前环境目录中，是不能访问的，设置的是一个相对目录，当前springboot的相对目录是对于component来说的，是访问不到的，单独导入这个工程即可，
        已经测试过
不建议使用jsp，建议使用模板引擎（thymeleaf）
    需要在resources目录下面新建目录templates
    Controller见Controller中的ThymeleafController
Swagger2
    构建API文档
    随项目自动生成强大的Restful API文档，减少工作量，
    API文档与代码整合在一起，便于同步更新API说明，
    页面测试功能来调试每个Restful API
    访问链接：
        http://localhost:8080/swagger-ui.html
集成日志
    slf4j(simple logging facade for java)
    logback（建议使用）
    log4j2
    log4j（已停止维护）
热加载
    spring-boot-devtools

    不会变化的jar
    可能会变化的Java类

编译打包
    jar(springboot建议的打jar包)
        mvn clean package 打一个jar包
        cmd命令行下运行jar包
            java -jar springboot-1.0-SNAPSHOT.jar

            运行成功后 正常访问
    war
        设置打包方式为war包
        需要让启动类继承SpringBootServletInitializer
        重写configure方法
            return builder.sources(App2.class); 见App2类
        java -jar springboot-1.0-SNAPSHOT.war
集成Redis

SpringBoot CTL

springboot性能优化
    扫描优化
        在默认情况下，我们会使用@SpringBootApplication注解来自动获取应用的配置信息，但这样也会带来一些副作用。使用这个注解后，会触发自动配置（auto-configuration）
        和组件扫描（component scanning），这跟使用@Configuration、@EnableAutoConfiguration和@ComponentScan三个注解的作用是一样的。
        这样做给开发带来方便的同时，会有以下的一些影响：
        	会导致项目启动时间变长（原因：加载了我们不需要使用的组件,浪费了cpu资源和内存资源）。当启动一个大的应用程序，或将做大量的集成测试启动应用程序时，影响会特别明显。
        	会加载一些不需要的多余的实例（beans）。
        	会增加CPU消耗和内存的占用。
        见App3
        //运行类加VM参数 -Ddebug
        控制台输入的信息，大概分成四大类

        1.	Positive matches:
        匹配（以及匹配的原因）
        2.	Negative matches:
        忽略匹配（以及忽略的原因）
        3.	Exclusions:
        排除的配置类
        4.	Unconditional classes:
        没有带任何条件，肯定要扫描的类
    设置JVM内存
        -XX:PrintGCDetails -Xmx300M -Xms1M

     容器
        tomcat
        jetty
        undertow(效率相比较会有提升)
            使用Jmeter可以测试性能
            不支持jsp，基于nio
            设置，需要排除Tomcat的依赖，新增undertow的依赖
Atomikos（多数据源）
    Atomikos 是一个兼容标准的SUN公司JTA API，为Java平台提供增值服务的并且开源类事务管理器。
    JTA（java Transaction API）是JavaEE 13 个开发规范之一。java 事务API，允许应用程序执行分布式事务处理
springboot中的Tomcat
    如何加载？？？

        SpringBootApplication  》》》》 EnableAutoConfiguration
            扫描：spring.boot.enableautoconfiguration
                ServletWebServerFactoryAutoConfiguration

                    @Import
                        ServletWebServerFactoryAutoConfiguration


                    这个类中有一个Tomcat
                    TomcatServletWebServerFactoryCustomizer  implements WebServerFactoryCustomizer<TomcatServletWebServerFactory>

                    WebServerFactoryCustomizer 在定义全局异常页面时有使用到 见GlobalExceptionHandler

    ServletWebServerFactoryAutoConfiguration


    springboot的启动流程
        ApplicationContextInitializer  Context初始化后调用的类
        SpringApplicationRunListener SpringBoot运行监听的类 整个springboot的启动流程


        ApplicationRunner
        CommandLineRunner



