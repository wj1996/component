aio（异步）
    AsynchronousSocketChannel
    AsynchronousServerSocketChannel
    CompletionHandler

    所有的操作（读和写）都是异步的，需要Handler来实现（实现CompletionHandler）

nio
    ServerSocketChannel
    SocketChannel
    Selector

netty编程
    Channel
    回调和Future
    事件和ChannelHandler

    final EchoServerHandler handler = new EchoServerHandler();
    EventLoopGroup group = new NioEventLoopGroup();   //线程池
    ServerBootstrap serverBootstrap = new ServerBootstrap();   //引导启动类
    serverBootstrap.group(group)
                        .channel(NioServerSocketChannel.class)   //指定通讯模式
                        .localAddress(new InetSocketAddress(port)) //配置监听端口
                        /*
                        接收到连接请求，新启动一个socket通信，也就是channel，每个channel都有自己事件的handler
                         */
                        .childHandler(new ChannelInitializer<SocketChannel>() {
                            protected void initChannel(SocketChannel ch) throws Exception {
                                ch.pipeline().addLast(handler);
                                /*
                                如果 handler不是@ChannelHandler.Sharable这样的，这些写，启动多个客户端时，就会有问题。
                                 */
                            }
                        });
    serverBootstrap.bind();----->
    AbstractBootstrap

        initAndRegister() ---->
            config().group().register(channel);     -------》这后面的逻辑，this对象指向的就是config.group()--->NioEventLoopGroup
            此处的group就是创建的EventLoopGroup（NioEventLoopGroup）；

            register方法其实就是调用MultithreadEventLoopGroup的register方法
                next().register(channel);  --------> next() 获取一个NioEventLoop，此时this指向的是这个NioEventLoop
                    next() ---> (EventLoop)super.next();
                                           chooser.next();
                                           chooser ---> private final EventExecutorChooserFactory.EventExecutorChooser chosser;

                                           DefaultEventExecutorChooserFactory---->
                                                EventExecutor next() --->
                                                    executors[idx.getAndIncrement() & executors.length - 1];

                                                private final EventExecutor[] executors;

                                                此处的executors默认会存放8个NioEventLoop。
                next()方法会从executors中获取一个NioEventLoop对象 ，将这个channel注册到这个NioEventLoop
                    SingleThreadEventLoop----》
                        注册方法实际调用这个类的register方法
                        register(Channel channel)---》
                           promise.channel().unsafe().register(this, promise);--->向下调入,这个this指向的就是从executors中获取的NioEventLoop

                            AbstractChannel----》
                                register(EventLoop eventLoop, final ChannelPromise promise) ---》
                                    会做一些判断，首先判断不能为空，如果为空，抛空指针异常
                                    判断是否已经注册过，如果注册过，也设置不合法的状态
                                    然后判断是否匹配，判断(eventLoop)类型是否是NioEventLoop,如果不是，报错

                                    判断是否是当前线程，如果不是，执行下述方法
                                    （从main方法进入的时候，执行这段逻辑的是main主线程，而eventLoop的线程是另一个线程，所以进入下列逻辑）
                                         交由线程池去执行。交给了NioEventLoop线程池，此处是第一个任务,此时转换线程执行，分析在netty工作线程里面
                                         eventLoop.execute(new Runnable() {
                                                                @Override
                                                                public void run() {
                                                                    register0(promise);
                                                                }
                                                            });  ----------》
                                            register0(promise);------>
                                                 doRegister();---->
                                                    AbstractNioChannel------->
                                                        doRegister();------->
                                                           selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this);----》
                                                           //此处是不是愉快的发现了nio原生jdk编程中，将通道注册到selector上面
                                                                javaChannle()---->  NioServerSocketChannel
                                                                    (ServerSocketChannel) super.javaChannel();---->
                                                                eventLoop().unwrappedSelector() --> selector
                                                                0 ----->  此处的操作参数竟然传了个0？？？？下面会解答


        由netty的工作线程去处理：NioEventLoop
            SingleThreadEventExecutor------->
                doStartThread()----->
                    交由线程池执行
                     executor.execute(new Runnable());
                     执行任务的逻辑：
                        SingleThreadEventExecutor.this.run();-----》
                            NioEventLoop------>
                                void run()------》
                                    此处有一段逻辑：
                                        死循环，进行选择策略的判断
                                        case SelectStrategy.SELECT:
                                                                select(wakenUp.getAndSet(false)); //此处就是选择，使用selector来选择事件
                                                                原生JDK的Nio编程中，使用selector来选择


                                    在finally的处理中有这样一段逻辑
                                    SingleThreadEventExecutor---》
                                                    runAllTasks(ioTime * (100 - ioRatio) / ioRatio);----》
                                                        for死循环，执行每个任务
                                                        safeExecute(task);-------》
                                                            第一个执行任务：
                                                                AbstractBootStrap----->
                                                                if (regFuture.isSuccess()) {
                                                                                    channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
                                                                                } else {
                                                                                    promise.setFailure(regFuture.cause());
                                                                                }

            AbstractExecutor-------》 eventLoop
                safeExecute(Runnable task)----》
                    task.run();----》
                        register0(promise);----->

        线程池执行任务-------》
            pipeline.fireChannelActive();-----》
                DefaultChannelpipeline------》
                    AbstractChannelHandlerContext.invokeChannelActive(head);----》
                        AbstractChannelHandlerContext-----》
                            void invokeChannelActive(final AbstractChannelHandlerContext next)----》
                                next.invokeChannelActive();---->
                                    void invokeChannelActive()----->
                                        ((ChannelInboundHandler) handler()).channelActive(this);---->
                                            void channelActive(ChannelHandlerContext ctx)----->
                                                ctx.fireChannelActive();---->
                                                readIfIsAutoRead();---->
                                                    执行的就是下述的逻辑分析


        DefaultChannelpipeline------>
            channelActive(ChannelHandlerContext ctx) ------>

                readIfIsAutoRead(); ---->
                    channel.read(); ----->
                       AbstractChannel----->
                         Channel read()---->
                            pipeline.read();---->
                                DefaultChannelpipeline----->
                                    ChannelPipeline read() -----》
                                         tail.read();-----》
                                            AbstractChannelHandlerContext----》
                                                next.invokeRead();-----》
                                                    invokeRead();----->
                                                       ((ChannelOutboundHandler) handler()).read(this);---->
                                                             DefaultChannelPipeline$HeadContext------>
                                                                unsafe.beginRead();---->
                                                                    DefaultChannelPipeline$AbstractUnsafe----->
                                                                        beginRead()---->
                                                                            doBeginRead();----->
                                                                                AbstractNioMessageChannel---->
                                                                                    super.doBeginRead();---->
                                                                                        AbstractNioChannel---->
                                                                                            doBeginRead()---->
                                                                                                selectionKey.interestOps(interestOps | readInterestOp);---->
                                                                                                    SelectionKeyImpl---->
                                                                                                        SelectionKey interestOps(int var1)---->
                                                                                                            return this.nioInterestOps(var1);--->
                                                                                                            此处通过selectionKey去操作，修改注册的事件，修改为监听
                                                                                                            OP_ACCEPT事件








        doBind0(regFuture, channel, localAddress, promise);----》
            channel.eventLoop().execute(new Runnable() {
                        @Override
                        public void run() {
                            if (regFuture.isSuccess()) {
                                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
                            } else {
                                promise.setFailure(regFuture.cause());
                            }
                        }
            });
            将绑定事件交给channel.eventLoop()线程池去处理
            实际执行的方法：
            channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);----》
                AbstractChannel bind(SocketAddress localAddress, ChannelPromise promise); --->
                        pipeline.bind(localAddress, promise);---->
                            DefaultChannelPipeline------>
                                ChannelFuture bind(SocketAddress localAddress, ChannelPromise promise);---->
                                    tail.bind(localAddress, promise);---->
                                        AbstractChannelHandlerContext------>
                                            bind(final SocketAddress localAddress, final ChannelPromise promise);---->
                                            开始发现熟悉的类了，SocketAddress
                                                final AbstractChannelHandlerContext next = findContextOutbound(MASK_BIND);
                                                EventExecutor executor = next.executor();
                                                executor.inEventLoop();
                                                判断当前执行的线程是否是对象里的线程
                                                如果是，开始执行下列逻辑
                                                next.invokeBind(localAddress, promise);------》
                                                       invokeBind(SocketAddress localAddress, ChannelPromise promise) ----》
                                                            首先会判断 invokeHandler()
                                                            如果是，执行下述逻辑
                                                            ((ChannelOutboundHandler) handler()).bind(this, localAddress, promise);----》
                                                                DefaultChannelPipeline-----》
                                                                    bind(ChannelHandlerContext ctx, SocketAddress localAddress, ChannelPromise promise)--->
                                                                        unsafe.bind(localAddress, promise);---->
                                                                            AbstractChannel中的AbstractUnsafe---->
                                                                                doBind(localAddress);------>
                                                                                    NioServerSocketChannel-------------->
                                                                                        doBind(SocketAddress localAddress)------->
                                                                                            javaChannel().bind(localAddress, config.getBacklog());---->
                                                                                                ServerSocketChannelImpl------->
                                                                                                    bind(SocketAddress var1, int var2);
                                                                                                    //此处就到了原生JDK调用bind方法的调用处










            EventLoopGoup 继承 MultithreadEventLoopGroup
                                    继承  MultithreadEventExecutorGroup
                                            继承  MultithreadEventExecutorGroup

                                    实现  EventLoopGroup
                                                继承 EventExecutorGroup
                                                        继承  ScheduledExecutorService，Iterable<EventExecutor>
                                                                继承  ExecutorService
                                                                          继承  Executor
            EventExecutor 继承 EventExecutorGroup


            NioEventLoop 继承 SingleThreadEventLoop
                                    继承  SingleThreadEventExecutor
                                    实现  EventLoop
                                            继承 OrderedEventExecutor
                                                继承
                                                    EventExecutor
                                                        继承
                                                            EventExecutorGroup
                                                                继承
                                                                    ScheduledExecutorService
                                            继承 EventLoopGroup
                                                继承
                                                    EventExecutorGroup







