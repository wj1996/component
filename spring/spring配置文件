注解：annotation
配置方式：
    xml
    注解
        @Configuration
        @Bean
            默认单实例
            和@Scope配合使用
            导入第三方的类或包的组件，需要在IOC容器中使用
        @ComponentScan
            自定义扫描
        @ComponentScans



        @Controller
        @Service
        @Repository
        @Component


        @Scope
            多实例  prototype
                仅当Bean使用的时候才创建
            单实例 singleton
                容器创建的时候就创建了
            request
                主要针对web应用，一次请求一个实例
            session
                同一个session一个实例
            global session
        @Lazy
            懒加载
            主要针对单实例，启动的时候不加载，第一次使用的时候加载（这个地方需要保证线程安全，spring中如何保证懒加载过程中是线程安全的呢？？）

        @Conditional条件注册bean

        @Import 注册bean
            1. 手动添加组件到IOC容器
            2. 使用ImportSelector自定义返回组件
            3. 使用ImportBeanDefinitionRegistrar返回自定义组件
Bean的生命周期
    创建》》》初始化》》》销毁

    初始化与销毁1
        init-method
        destroy-method
        见Bike类和MyConfig4
    单实例
    多实例

    初始化与销毁2
        1.实现InitializingBean接口的afterPropertiesSet()方法，当beanFactory创建好对象，且把bean所有属性设置好之后，会调用这个方法，
        相当于初始化方法。
        2.实现DisponsableBean的destroy()方法，当bean销毁时，会把单实例bean进行销毁。

        见Bike类和MyConfig4
    初始化与销毁3
        可以使用JSR250规范定义的两个注解来实现
        @PostConstruct：在bean创建完成，且属于服装款完成后进行初始化，属于JDK规范的注解
        @PreDestroy:在bean将被移除之前进行通知，在容器销毁之前进行清理工作

        JSR是JDK提供的一组规范

        见Jeep类和MyConfig4
    BeanPostProcessorsr
        bean的后置处理器，在bean进行初始化之前调用进行拦截，在bean进行初始化前后进行一些处理工作，使用BeanPostProcessors如何控制bean的生命周期：
        实现BeanPostProcessors的两个接口方法即可
            1.postProcessBeforeInitialization()
            2.postProcessAfterInitialization()

            对init方法的前后进行增强


        见MyBeanPostProcessor和Config4

        AbstractAutowireCapableBeanFactory
            Object initializeBean(final String beanName, final Object bean, @Nullable RootBeanDefinition mbd)
                wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
                    调用ApplicationContextAwareProcessor的postProcessBeforeInitialization方法
                        invokeAwareInterfaces(bean) 方法如下：
                        根据bean实现不同的Aware接口，进行相关的注入，比如实现ApplicationContextAware，会将spring的容器上下文对象注入到当前对象，
                        当前对象即可获取到当前的IOC容器对象。
                        private void invokeAwareInterfaces(Object bean) {
                        		if (bean instanceof Aware) {
                        			if (bean instanceof EnvironmentAware) {
                        				((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment());
                        			}
                        			if (bean instanceof EmbeddedValueResolverAware) {
                        				((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(this.embeddedValueResolver);
                        			}
                        			if (bean instanceof ResourceLoaderAware) {
                        				((ResourceLoaderAware) bean).setResourceLoader(this.applicationContext);
                        			}
                        			if (bean instanceof ApplicationEventPublisherAware) {
                        				((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(this.applicationContext);
                        			}
                        			if (bean instanceof MessageSourceAware) {
                        				((MessageSourceAware) bean).setMessageSource(this.applicationContext);
                        			}
                        			if (bean instanceof ApplicationContextAware) {
                        				((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);
                        			}
                        		}
                        }
                    见Plane


    @Autowired》》》AutowiredAnnotationBeanPostProcessor



    Spring底层对BeanPostProcessor的使用


    @Value
        见Bird类，MyConfig5,Demo05,my.properties
    自动装配：
        spring利用依赖注入（DI），完成对容器IOC的各个组件的依赖关系赋值
    1.bean组件加载优先级
    2.如果容器中存在两个ID相同的bean，会加载哪个bean呢？
    3.如何指定装配组件id进行加载@Qualifier
    4.容器加载不存在的bean会出现什么问题
    5.@Primary注解bean首选如何使用
    6.@Autowired @Resource 和@Inject的区别
    @Autowired

    @Qualifier


    @Resource jsr250
    @Primary
        针对@Autowired注解有效，对@Resource无效
        @Resource和@Autowired都是先根据名称作为id去寻找注入的bean对象，如果么有，再去找同类型的对象,同类型的对象必须不能超过1个，如果超过1个，IOC将不会
        知道到底要注入哪个对象，会报错，
            org.springframework.beans.factory.NoUniqueBeanDefinitionException:
            No qualifying bean of type 'com.wj.spring.annotation.cls2.MyService' available
            : expected single matching bean but found 2: myService3,myService2

        @Qualifier优先级比@Primary高
    @Inject  第三方的包

    见
        Demo06,MyConfig6,MyService,MyController

    @Autowired
        使用场景 作用在属性，方法，变量上
        见 Sun Moon Demo07

    自动装配Aware

    常见XXXAware接口
        ApplicationContextAware接口：获取IOC容器
        BeanNameAware接口：获取bean信息
        EmbeddedValueResolverAware接口：解析器（表达式及相关脚本解析）

        见Light
IOC容器

FactoryBean和BeanFactory 区别？？？
    可以将java实例bean通过FactoryBean注入到容器中
    可以从BeanFactory中获取bean对象（实例化后的bean对象）

容器启动加载配置类----》refresh()-----》finishBeanFactoryInitialization()---》getBean()-----》doCreateBean()-----》
beanWrapper（对象的创建）----》populated（属性赋值）----》initialize()-----》processors-----》aware


AOP
    面向切面编程（底层就是动态代理）


