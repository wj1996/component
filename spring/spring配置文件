注解：annotation
配置方式：
    xml
    注解
        @Configuration
        @Bean
            默认单实例
            和@Scope配合使用
            导入第三方的类或包的组件，需要在IOC容器中使用
        @ComponentScan
            自定义扫描
        @ComponentScans



        @Controller
        @Service
        @Repository
        @Component


        @Scope
            多实例  prototype
                仅当Bean使用的时候才创建
            单实例 singleton
                容器创建的时候就创建了
            request
                主要针对web应用，一次请求一个实例
            session
                同一个session一个实例
            global session
        @Lazy
            懒加载
            主要针对单实例，启动的时候不加载，第一次使用的时候加载（这个地方需要保证线程安全，spring中如何保证懒加载过程中是线程安全的呢？？）

        @Conditional条件注册bean

        @Import 注册bean
            1. 手动添加组件到IOC容器
            2. 使用ImportSelector自定义返回组件
            3. 使用ImportBeanDefinitionRegistrar返回自定义组件
Bean的生命周期
    创建》》》初始化》》》销毁

    初始化与销毁1
        init-method
        destroy-method
        见Bike类和MyConfig4
    单实例
    多实例

    初始化与销毁2
        1.实现InitializingBean接口的afterPropertiesSet()方法，当beanFactory创建好对象，且把bean所有属性设置好之后，会调用这个方法，
        相当于初始化方法。
        2.实现DisponsableBean的destroy()方法，当bean销毁时，会把单实例bean进行销毁。

        见Bike类和MyConfig4
    初始化与销毁3
        可以使用JSR250规范定义的两个注解来实现
        @PostConstruct：在bean创建完成，且属于服装款完成后进行初始化，属于JDK规范的注解
        @PreDestroy:在bean将被移除之前进行通知，在容器销毁之前进行清理工作

        JSR是JDK提供的一组规范

        见Jeep类和MyConfig4
    BeanPostProcessorsr
        bean的后置处理器，在bean进行初始化之前调用进行拦截，在bean进行初始化前后进行一些处理工作，使用BeanPostProcessors如何控制bean的生命周期：
        实现BeanPostProcessors的两个接口方法即可
            1.postProcessBeforeInitialization()
            2.postProcessAfterInitialization()

            对init方法的前后进行增强


        见MyBeanPostProcessor和Config4



    @Autowired


IOC容器

FactoryBean和BeanFactory 区别？？？
    可以将java实例bean通过FactoryBean注入到容器中
    可以从BeanFactory中获取bean对象（实例化后的bean对象）





